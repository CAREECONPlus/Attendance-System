rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Global users collection - ユーザーは自分の情報のみ読み書き可能
    match /global_users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && isSuperAdmin(request.auth.uid);
    }
    
    // Legacy users collection - ユーザーは自分の情報のみ読み書き可能
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && isSuperAdmin(request.auth.uid);
    }
    
    // Tenants collection - テナント管理者またはスーパー管理者のみアクセス可能
    match /tenants/{tenantId} {
      allow read: if request.auth != null && 
                 (isSuperAdmin(request.auth.uid) || 
                  getUserTenantId(request.auth.uid) == tenantId);
      allow write: if request.auth != null && 
                  (isSuperAdmin(request.auth.uid) || 
                   isAdmin(request.auth.uid, tenantId));
    }
    
    // Tenant subcollections - 同一テナント内ユーザーのみアクセス可能
    match /tenants/{tenantId}/{subcollection}/{docId} {
      allow read, write: if request.auth != null && 
                        (isSuperAdmin(request.auth.uid) || 
                         getUserTenantId(request.auth.uid) == tenantId);
    }
    
    // Admin requests - スーパー管理者のみ読み書き可能、作成は未認証でも可能
    match /admin_requests/{docId} {
      allow read, write: if request.auth != null && isSuperAdmin(request.auth.uid);
      allow create: if true; // 管理者登録依頼は未認証ユーザーが作成可能
    }
    
    // Invite codes - 検証は未認証でも可能、管理はテナント管理者のみ
    match /invite_codes/{docId} {
      allow read: if true; // 招待リンクの検証は未認証ユーザーも必要
      allow list: if request.auth != null && 
                 (isSuperAdmin(request.auth.uid) || 
                  getUserTenantId(request.auth.uid) == resource.data.tenantId);
      allow write: if request.auth != null && 
                  (isSuperAdmin(request.auth.uid) || 
                   isAdmin(request.auth.uid, resource.data.tenantId));
      allow create: if request.auth != null && 
                   (isSuperAdmin(request.auth.uid) || 
                    getUserTenantId(request.auth.uid) == request.resource.data.tenantId);
      allow update: if request.auth != null; // 招待コードの使用回数更新は認証済みユーザーが可能
    }
    
    // Helper functions
    function getUserTenantId(uid) {
      return exists(/databases/$(database)/documents/global_users/$(uid)) 
        ? get(/databases/$(database)/documents/global_users/$(uid)).data.tenantId 
        : '';
    }
    
    function isSuperAdmin(uid) {
      return exists(/databases/$(database)/documents/global_users/$(uid)) 
        ? get(/databases/$(database)/documents/global_users/$(uid)).data.role == 'super_admin' 
        : (exists(/databases/$(database)/documents/users/$(uid)) &&
           get(/databases/$(database)/documents/users/$(uid)).data.role == 'super_admin');
    }
    
    function isAdmin(uid, tenantId) {
      return exists(/databases/$(database)/documents/global_users/$(uid)) 
        ? (get(/databases/$(database)/documents/global_users/$(uid)).data.tenantId == tenantId && 
           get(/databases/$(database)/documents/global_users/$(uid)).data.role in ['admin', 'super_admin'])
        : false;
    }
  }
}