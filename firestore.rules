rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Global users collection
    match /global_users/{email} {
      allow read, write: if request.auth != null && request.auth.token.email == email;
      allow write: if request.auth != null && isSuperAdmin(request.auth.token.email);
    }
    
    // Legacy users collection
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Tenants collection
    match /tenants/{tenantId} {
      allow read: if request.auth != null && 
                 (isSuperAdmin(request.auth.token.email) || 
                  getUserTenantId(request.auth.token.email) == tenantId);
      allow write: if request.auth != null && 
                  (isSuperAdmin(request.auth.token.email) || 
                   isAdmin(request.auth.token.email, tenantId));
    }
    
    // Tenant subcollections
    match /tenants/{tenantId}/{subcollection}/{docId} {
      allow read, write: if request.auth != null && 
                        (isSuperAdmin(request.auth.token.email) || 
                         getUserTenantId(request.auth.token.email) == tenantId);
    }
    
    // Admin requests
    match /admin_requests/{docId} {
      allow read, write: if request.auth != null && isSuperAdmin(request.auth.token.email);
      allow create: if true; // 管理者登録依頼は未認証ユーザーが作成可能
    }
    
    // Invite codes collection  
    match /invite_codes/{docId} {
      allow read, write: if request.auth != null && 
                        (isSuperAdmin(request.auth.token.email) || 
                         isAdmin(request.auth.token.email, resource.data.tenantId));
      allow create: if request.auth != null && 
                   (isSuperAdmin(request.auth.token.email) || 
                    isAdmin(request.auth.token.email, request.resource.data.tenantId));
    }
    
    // Test collection
    match /_test/{docId} {
      allow read, write: if request.auth != null;
    }
    
    // Helper functions
    function getUserTenantId(email) {
      return get(/databases/$(database)/documents/global_users/$(email)).data.tenantId;
    }
    
    function isSuperAdmin(email) {
      return get(/databases/$(database)/documents/global_users/$(email)).data.role == 'super_admin';
    }
    
    function isAdmin(email, tenantId) {
      let userData = get(/databases/$(database)/documents/global_users/$(email)).data;
      return userData.tenantId == tenantId && userData.role in ['admin', 'super_admin'];
    }
  }
}